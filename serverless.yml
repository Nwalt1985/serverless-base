org: 'nathan85'
service: 'pricing-service'
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dynamodb-autoscaling
  - serverless-api-gateway-caching

custom:
  apiGatewayCaching:
    enabled: true
  s3bucketName: pricing-data-${self:provider.stage}
  capacities:
    - table: pricingTable
      read:
        minimum: 5
        maximum: 1000
        usage: 0.75
      write:
        minimum: 40
        maximum: 200
        usage: 0.5
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      convertEmptyValues: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs14.x
  region: eu-west-2
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - Fn::GetAtt: [pricingTable, Arn]
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
      Resource: '*'
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::${self:custom.s3bucketName}/*"
  environment:
    NODE_OPTIONS: '--enable-source-maps'
    CONFIG_REGION: ${self:provider.region}
    DYNAMODB_TABLE_NAME: pricing-${self:provider.stage}

functions:
  uploadCSV:
    name: uploadCSV-${self:provider.stage}
    handler: ./src/handlers/s3/uploadCSV.handler
    events:
      - s3:
          bucket: ${self:custom.s3bucketName}
          event: s3:ObjectCreated:Put
          rules:
            - suffix: .csv

  getPricingData:
    name: getPricingData-${self:provider.stage}
    handler: ./src/handlers/get/pricingData.handler
    events:
      - http:
          path: pricing
          method: GET
          cors: true
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.querystring.sku

resources:
  Resources:
    pricingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pricing-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: sku
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    PricingData:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3bucketName}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
              MaxAge: 3000
